public class Solution {
    
    private class TrieNode {
        Character val;
        boolean isWord;
        TrieNode[] children;
        public TrieNode() {
            val = null;
            isWord = false;
            children = new TrieNode[26];
        }
        public TrieNode(char chr) {
            val = chr;
            isWord = false;
            children = new TrieNode[26];
        }
    }
    
    private void add(String word, TrieNode root) {
        TrieNode cur = root;
        for(int i = 0; i < word.length(); i ++) {
            char chr = word.charAt(i);
            int index = chr - 'a';
            if(cur.children[index] == null) cur.children[index] = new TrieNode(chr);
            cur = cur.children[index];
        }
        cur.isWord = true;
    }
    
    private void searchAndAdd(char[][] board, String[] words, int x, int y, TrieNode root, StringBuilder sb, List<String> res) {
        if(root.isWord) {
            res.add(sb.toString());
            root.isWord = false;
        }
        if(x < 0 || y < 0 || x >= board.length || y >= board[0].length || board[x][y] == '#') return;
        char chr = board[x][y];
        int index = chr - 'a';
        if(root.children[index] == null)    return;
        
        int[] dx = {-1,1,0,0};
        int[] dy = {0,0,-1,1};
        int length = sb.length();
        for(int i = 0; i < 4; i++) {
            int xx = x + dx[i];
            int yy = y + dy[i];
            sb.append(chr);
            board[x][y] = '#';
            searchAndAdd(board, words, xx, yy, root.children[index], sb, res);
            board[x][y] = chr;
            sb.setLength(length);
        }
        
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        if(board == null || board.length == 0 || board[0].length == 0 || words == null || words.length == 0)   return res;
        TrieNode root = new TrieNode();
        for(String word: words) {
            add(word, root);
        }
        for(int i = 0; i < board.length; i ++) {
            for(int j = 0; j < board[0].length; j ++) {
                searchAndAdd(board, words, i, j, root, new StringBuilder(), res);
            }
        }
        return res;
    }
}

/*
利用trienode来构造trie，
首先将words中的每个word取出，利用add的方法，构造成一个trie，
利用该trie来寻找判断；

再遍历board的每一个元素，利用searchAndAdd来进行寻找，
若判断了该root处有一个word，则将其加入到res中，并且将其isword置为false，来防止之后再次找到出现重复
同时继续进行判断，
当x,y和当前board[x][y]不符合条件或在trie中没有找到对应children的数组的时候，返回，
然后遍历该点的上下左右，利用backtracking的方法进入下一层循环，同时在返回的时候置为初值，

利用将board[x][y] = '#'来标记该点已经visited
*/

public List<String> findWords(char[][] board, String[] words) {
    List<String> res = new ArrayList<>();
    TrieNode root = buildTrie(words);
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            dfs (board, i, j, root, res);
        }
    }
    return res;
}

public void dfs(char[][] board, int i, int j, TrieNode p, List<String> res) {
    char c = board[i][j];
    if (c == '#' || p.next[c - 'a'] == null) return;
    p = p.next[c - 'a'];
    if (p.word != null) {   // found one
        res.add(p.word);
        p.word = null;     // de-duplicate
    }

    board[i][j] = '#';
    if (i > 0) dfs(board, i - 1, j ,p, res); 
    if (j > 0) dfs(board, i, j - 1, p, res);
    if (i < board.length - 1) dfs(board, i + 1, j, p, res); 
    if (j < board[0].length - 1) dfs(board, i, j + 1, p, res); 
    board[i][j] = c;
}

public TrieNode buildTrie(String[] words) {
    TrieNode root = new TrieNode();
    for (String w : words) {
        TrieNode p = root;
        for (char c : w.toCharArray()) {
            int i = c - 'a';
            if (p.next[i] == null) p.next[i] = new TrieNode();
            p = p.next[i];
       }
       p.word = w;
    }
    return root;
}

class TrieNode {
    TrieNode[] next = new TrieNode[26];
    String word;
}