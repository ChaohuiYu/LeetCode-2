public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        if(n == 0 || k == 0)    return res;
        int[] nums = new int[9];
        for(int i = 1; i <= 9; i ++)    nums[i - 1] = i;
        helper(res, new ArrayList<Integer>(), nums, 0, k, n);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> list, int[] nums, int start, int k, int n) {
        if(n == 0 && k == 0) {
            res.add(new ArrayList<>(list));
            return;
        }
        if(n < 0 || (n > 0 && k <= 0))   return;
        for(int i = start; i < nums.length; i ++) {
            list.add(nums[i]);
            helper(res, list, nums, i + 1, k - 1, n - nums[i]);
            list.remove(list.size() - 1);
        }
    }
}

/*
ez
*/